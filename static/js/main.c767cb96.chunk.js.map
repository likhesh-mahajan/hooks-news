{"version":3,"sources":["serviceWorker.js","index.js","App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","_useState","useState","_useState2","Object","slicedToArray","results","setResults","_useState3","_useState4","query","setQuery","_useState5","_useState6","loading","setLoading","_useState7","_useState8","error","setError","searchInputRef","useRef","useEffect","getResults","_ref","asyncToGenerator","regenerator_default","mark","_callee","response","wrap","_context","prev","next","axios","get","concat","sent","data","hits","t0","stop","this","apply","arguments","className","src","alt","onSubmit","event","preventDefault","type","onChange","target","value","ref","onClick","current","focus","map","_ref2","objectID","url","title","key","href","message","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOC,EAAAC,EAAAC,cCFD,WAAe,IAAAC,EACEC,mBAAS,IADXC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACrBK,EADqBH,EAAA,GACZI,EADYJ,EAAA,GAAAK,EAEFN,mBAAS,eAFPO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAErBE,EAFqBD,EAAA,GAEdE,EAFcF,EAAA,GAAAG,EAGEV,oBAAS,GAHXW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAGrBE,EAHqBD,EAAA,GAGZE,EAHYF,EAAA,GAAAG,EAIFd,mBAAS,MAJPe,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAIrBE,EAJqBD,EAAA,GAIdE,EAJcF,EAAA,GAKtBG,EAAiBC,mBAEvBC,oBAAU,WACRC,KACC,IAEH,IAAMA,EAAU,eAAAC,EAAApB,OAAAqB,EAAA,EAAArB,CAAAsB,EAAA3B,EAAA4B,KAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAH,EAAA3B,EAAA+B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACjBlB,GAAW,GADMgB,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAIQC,IAAMC,IAAN,6CAAAC,OACwB1B,IALhC,OAITmB,EAJSE,EAAAM,KAOf9B,EAAWsB,EAASS,KAAKC,MAPVR,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAS,GAAAT,EAAA,SASfZ,EAAQY,EAAAS,IATO,QAWjBzB,GAAW,GAXM,yBAAAgB,EAAAU,SAAAb,EAAAc,KAAA,YAAH,yBAAAlB,EAAAmB,MAAAD,KAAAE,YAAA,GAwBhB,OACE9C,EAAAC,EAAAC,cAAA,OAAK6C,UAAU,2EACb/C,EAAAC,EAAAC,cAAA,OACE8C,IAAI,gCACJC,IAAI,aACJF,UAAU,qBAEZ/C,EAAAC,EAAAC,cAAA,MAAI6C,UAAU,+BAAd,cACA/C,EAAAC,EAAAC,cAAA,QAAMgD,SAlBW,SAAAC,GACnBA,EAAMC,iBACN3B,KAgBgCsB,UAAU,QACtC/C,EAAAC,EAAAC,cAAA,SACEmD,KAAK,OACLC,SAAU,SAAAH,GAAK,OAAItC,EAASsC,EAAMI,OAAOC,QACzCA,MAAO5C,EACP6C,IAAKnC,EACLyB,UAAU,uBAEZ/C,EAAAC,EAAAC,cAAA,UAAQmD,KAAK,SAASN,UAAU,6BAAhC,UAGA/C,EAAAC,EAAAC,cAAA,UACEmD,KAAK,SACLK,QA1BY,WAClB7C,EAAS,IACTS,EAAeqC,QAAQC,SAyBjBb,UAAU,kCAHZ,WAQA3B,GAASJ,EACThB,EAAAC,EAAAC,cAAA,OAAK6C,UAAU,8BAAf,sBAEA/C,EAAAC,EAAAC,cAAA,MAAI6C,UAAU,6BACXvC,EAAQqD,IAAI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAUC,EAAbF,EAAaE,IAAKC,EAAlBH,EAAkBG,MAAlB,OACXjE,EAAAC,EAAAC,cAAA,MAAIgE,IAAKH,GACP/D,EAAAC,EAAAC,cAAA,KACEiE,KAAMH,EACNjB,UAAU,8CAETkB,OAOV7C,GAASpB,EAAAC,EAAAC,cAAA,OAAK6C,UAAU,sBAAsB3B,EAAMgD,WD7E3C,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c767cb96.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nif (module.hot) {\n  module.hot.accept();\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\n\nexport default function App() {\n  const [results, setResults] = useState([]);\n  const [query, setQuery] = useState('react hooks');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const searchInputRef = useRef();\n\n  useEffect(() => {\n    getResults();\n  }, []);\n\n  const getResults = async () => {\n    setLoading(true);\n\n    try {\n      const response = await axios.get(\n        `http://hn.algolia.com/api/v1/search?query=${query}`\n      );\n      setResults(response.data.hits);\n    } catch (err) {\n      setError(err);\n    }\n    setLoading(false);\n  };\n\n  const handleSearch = event => {\n    event.preventDefault();\n    getResults();\n  };\n\n  const clearSearch = () => {\n    setQuery('');\n    searchInputRef.current.focus();\n  };\n\n  return (\n    <div className=\"container max-w-md mx-auto p-4 m-2 bg-purple-lightest shadow-lg rounded\">\n      <img\n        src=\"https://icon.now.sh/react/c0c\"\n        alt=\"React Logo\"\n        className=\"float-right h-12\"\n      />\n      <h1 className=\"text-grey-darkest font-thin\">Hooks News</h1>\n      <form onSubmit={handleSearch} className=\"mb-2\">\n        <input\n          type=\"text\"\n          onChange={event => setQuery(event.target.value)}\n          value={query}\n          ref={searchInputRef}\n          className=\"border p-1 rounded\"\n        />\n        <button type=\"submit\" className=\"bg-orange rounded m-1 p-1\">\n          Search\n        </button>\n        <button\n          type=\"button\"\n          onClick={clearSearch}\n          className=\"bg-teal text-white p-1 rounded\"\n        >\n          Clear\n        </button>\n      </form>\n      {!error && loading ? (\n        <div className=\"font-bold text-orange-dark\">Loading Results...</div>\n      ) : (\n        <ul className=\"list-reset leading-normal\">\n          {results.map(({ objectID, url, title }) => (\n            <li key={objectID}>\n              <a\n                href={url}\n                className=\"text-indigo-dark hover:text-indigo-darkest\"\n              >\n                {title}\n              </a>\n            </li>\n          ))}\n        </ul>\n      )}\n\n      {error && <div className=\"text-red font-bold\">{error.message}</div>}\n    </div>\n  );\n}\n"],"sourceRoot":""}